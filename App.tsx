
import React, { useState, useCallback, useEffect } from 'react';
import { FileUploader } from './components/FileUploader';
import { FileList } from './components/FileList';
import { UploadedFile, AppNotification, NotificationType } from './types';
import * as fileService from './src/services/fileService';
import { InfoIcon } from './components/icons/InfoIcon';

const App: React.FC = () => {
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [notification, setNotification] = useState<AppNotification | null>(null);

  useEffect(() => {
    const loadInitialFiles = async () => {
      setIsLoading(true);
      try {
        const existingFiles = await fileService.getFiles();
        setUploadedFiles(existingFiles.sort((a, b) => {
          // Assuming URLs might contain timestamp or are otherwise sortable reverse-chronologically
          // Or, if backend adds an 'uploadedAt' field, sort by that.
          // For now, simple reverse assuming order from server is somewhat chronological (newest first from our index)
          return 0; // Keeping original order from server for now as index.json maintains it
        }));
      } catch (error) {
        console.error("Error fetching initial files:", error);
        const message = error instanceof Error ? error.message : "Could not load existing file list.";
        setNotification({ message, type: NotificationType.Error });
      } finally {
        setIsLoading(false);
      }
    };
    loadInitialFiles();
  }, []);

  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsLoading(true);
    setNotification(null);

    try {
      // fileService.uploadFiles now handles server upload and returns full metadata
      // including server-generated description and Vercel Blob URL.
      const newFilesFromServer = await fileService.uploadFiles(Array.from(files));
      
      // Add new files to the top of the list
      setUploadedFiles(prevFiles => [...newFilesFromServer, ...prevFiles]);

      if (newFilesFromServer.length > 0) {
        setNotification({ message: `${newFilesFromServer.length} file(s) uploaded successfully! Descriptions generated by server.`, type: NotificationType.Success });
      }

    } catch (error) {
        console.error("Error uploading files:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred during upload.";
        setNotification({ message: `Upload failed: ${errorMessage}`, type: NotificationType.Error });
    } finally {
        setIsLoading(false);
        // Clear the file input
        event.target.value = '';
    }
  }, []);

  const handleRemoveFile = useCallback(async (fileId: string) => {
    setNotification(null);
    // fileId is the Vercel Blob pathname
    try {
      await fileService.deleteFile(fileId);
      setUploadedFiles(prevFiles => prevFiles.filter(f => f.id !== fileId));
      setNotification({ message: `File removed successfully.`, type: NotificationType.Info });
    } catch (error) {
      console.error("Error removing file:", error);
      const message = error instanceof Error ? error.message : "Failed to remove file.";
      setNotification({ message, type: NotificationType.Error });
    }
  }, []);

  return (
    <div className="min-h-screen bg-neutral-950 text-neutral-100 p-4 sm:p-8 flex flex-col items-center selection:bg-sky-500 selection:text-white">
      <header className="w-full max-w-4xl mb-10 text-center">
        <h1 className="text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-sky-400 to-blue-600 mb-3">
          FileDrop CDN
        </h1>
        <p className="text-neutral-400 text-lg">Upload files, get permanent shareable links, powered by Vercel Blob & Gemini.</p>
      </header>
      
      <div className="w-full max-w-2xl bg-neutral-900 shadow-2xl rounded-xl p-6 sm:p-8 mb-8">
        <FileUploader onFileUpload={handleFileUpload} isLoadingGlobal={isLoading} />
      </div>
      
      <div className="w-full max-w-2xl bg-sky-700/30 border border-sky-600 text-sky-200 px-4 py-3 rounded-xl relative mb-6 flex items-start shadow-lg" role="alert">
        <InfoIcon className="h-5 w-5 mr-3 mt-0.5 text-sky-400 flex-shrink-0"/>
        <div>
          <strong className="font-bold">Welcome to FileDrop CDN!</strong>
          <span className="block sm:inline"> Files are now uploaded to Vercel Blob for persistent storage. Image descriptions are generated server-side using the Gemini API.</span>
        </div>
      </div>

      {notification && (
        <div 
          className={`w-full max-w-2xl px-4 py-3 rounded-xl relative mb-6 flex items-center shadow-xl
            ${notification.type === NotificationType.Success ? 'bg-green-600/30 border border-green-500 text-green-300' : ''}
            ${notification.type === NotificationType.Error ? 'bg-red-600/30 border border-red-500 text-red-300' : ''}
            ${notification.type === NotificationType.Info ? 'bg-sky-600/30 border border-sky-500 text-sky-300' : ''}
          `}
          role="alert"
        >
          <InfoIcon className={`h-5 w-5 mr-3 flex-shrink-0
            ${notification.type === NotificationType.Success ? 'text-green-400' : ''}
            ${notification.type === NotificationType.Error ? 'text-red-400' : ''}
            ${notification.type === NotificationType.Info ? 'text-sky-400' : ''}
          `}/>
          <span className="block sm:inline flex-grow">{notification.message}</span>
          <button 
            onClick={() => setNotification(null)} 
            className="ml-4 p-1 rounded-full text-inherit hover:bg-white/10 transition-colors"
            aria-label="Close notification"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
              <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      )}

      {isLoading && <p className="text-neutral-400 text-lg my-8">Loading files...</p>}
      
      {!isLoading && uploadedFiles.length > 0 && (
        <div className="w-full max-w-4xl mt-4">
          <h2 className="text-3xl font-semibold mb-6 text-neutral-300 text-center">Uploaded Files</h2>
          <FileList files={uploadedFiles} onRemoveFile={handleRemoveFile} />
        </div>
      )}
       {!isLoading && uploadedFiles.length === 0 && (
        <div className="w-full max-w-4xl mt-4 text-center text-neutral-500">
            <p className="text-lg">No files uploaded yet. Drag and drop or click above to start!</p>
        </div>
       )}
       <footer className="w-full max-w-4xl mt-16 mb-8 text-center text-neutral-600 text-sm">
        <p>FileDrop CDN - React, Vercel Blob & Gemini API Demo</p>
        <p>Image descriptions generated by Gemini API (server-side). Ensure <code>API_KEY</code> is set in Vercel project environment variables.</p>
        <p className="mt-2">UI Design: Fluent-inspired Dark Mode</p>
      </footer>
    </div>
  );
};

export default App;